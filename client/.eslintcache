[{"C:\\Users\\smudg\\Desktop\\Bootcamp\\effective-robot\\client\\src\\index.js":"1","C:\\Users\\smudg\\Desktop\\Bootcamp\\effective-robot\\client\\src\\App.js":"2","C:\\Users\\smudg\\Desktop\\Bootcamp\\effective-robot\\client\\src\\reportWebVitals.js":"3","C:\\Users\\smudg\\Desktop\\Bootcamp\\effective-robot\\client\\src\\pages\\Register\\index.js":"4","C:\\Users\\smudg\\Desktop\\Bootcamp\\effective-robot\\client\\src\\pages\\Footer\\index.js":"5","C:\\Users\\smudg\\Desktop\\Bootcamp\\effective-robot\\client\\src\\pages\\Header\\index.js":"6","C:\\Users\\smudg\\Desktop\\Bootcamp\\effective-robot\\client\\src\\pages\\Home\\index.js":"7","C:\\Users\\smudg\\Desktop\\Bootcamp\\effective-robot\\client\\src\\pages\\Login\\index.js":"8","C:\\Users\\smudg\\Desktop\\Bootcamp\\effective-robot\\client\\src\\utils\\mutations.js":"9","C:\\Users\\smudg\\Desktop\\Bootcamp\\effective-robot\\client\\src\\pages\\Navigation\\index.js":"10","C:\\Users\\smudg\\Desktop\\Bootcamp\\effective-robot\\client\\src\\pages\\Profile\\index.js":"11","C:\\Users\\smudg\\Desktop\\Bootcamp\\effective-robot\\client\\src\\pages\\Game\\index.js":"12","C:\\Users\\smudg\\Desktop\\Bootcamp\\effective-robot\\client\\src\\utils\\queries.js":"13","C:\\Users\\smudg\\Desktop\\Bootcamp\\effective-robot\\client\\src\\pages\\components\\ProfileList\\index.js":"14","C:\\Users\\smudg\\Desktop\\Bootcamp\\effective-robot\\client\\src\\utils\\choreMutations.js":"15"},{"size":288,"mtime":1675537898128,"results":"16","hashOfConfig":"17"},{"size":2428,"mtime":1675648832848,"results":"18","hashOfConfig":"17"},{"size":364,"mtime":1675537898138,"results":"19","hashOfConfig":"17"},{"size":3557,"mtime":1675643496271,"results":"20","hashOfConfig":"17"},{"size":121,"mtime":1675537898129,"results":"21","hashOfConfig":"17"},{"size":534,"mtime":1675649053454,"results":"22","hashOfConfig":"17"},{"size":1038,"mtime":1675544692857,"results":"23","hashOfConfig":"17"},{"size":2220,"mtime":1675643496269,"results":"24","hashOfConfig":"17"},{"size":1357,"mtime":1675643496275,"results":"25","hashOfConfig":"17"},{"size":1237,"mtime":1675648815897,"results":"26","hashOfConfig":"17"},{"size":7220,"mtime":1675643496269,"results":"27","hashOfConfig":"17"},{"size":7196,"mtime":1675647955393,"results":"28","hashOfConfig":"17"},{"size":960,"mtime":1675646585741,"results":"29","hashOfConfig":"17"},{"size":933,"mtime":1675643496273,"results":"30","hashOfConfig":"17"},{"size":1462,"mtime":1675647174454,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"z5n0y1",{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"34"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"34"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\smudg\\Desktop\\Bootcamp\\effective-robot\\client\\src\\index.js",[],["68","69"],"C:\\Users\\smudg\\Desktop\\Bootcamp\\effective-robot\\client\\src\\App.js",[],"C:\\Users\\smudg\\Desktop\\Bootcamp\\effective-robot\\client\\src\\reportWebVitals.js",[],"C:\\Users\\smudg\\Desktop\\Bootcamp\\effective-robot\\client\\src\\pages\\Register\\index.js",["70"],"import React, { useState } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport { REGISTER_USER } from \"../../utils/mutations\";\nimport { FaUser } from \"react-icons/fa\";\n\nfunction Register({ isLoggedIn, setIsLoggedIn, setCurrentTab }) {\n  const [username, setUsername] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [error, setError] = useState(\"\");\n\n  const [registerUser, { _error }] = useMutation(REGISTER_USER);\n\n  function handleUsernameChange(event) {\n    setUsername(event.target.value);\n  }\n\n  function handleEmailChange(event) {\n    setEmail(event.target.value);\n  }\n\n  function handlePasswordChange(event) {\n    setPassword(event.target.value);\n  }\n\n  function handleConfirmPasswordChange(event) {\n    setConfirmPassword(event.target.value);\n  }\n\n  async function handleSubmit(event) {\n    event.preventDefault();\n\n    // Validate the input values and perform registration here\n    if (password !== confirmPassword) {\n      setError(\"Passwords do not match\");\n      return;\n    }\n\n    try {\n      // const response = await fetch('<YOUR_REGISTRATION_API_ENDPOINT>', {\n      //   method: 'POST',\n      //   headers: { 'Content-Type': 'application/json' },\n      //   body: JSON.stringify({\n      //     username,\n      //     email,\n      //     password,\n      //   }),\n      // });\n\n      // const result = await response.json();\n      // if (result.success) {\n      //   console.log(`Successfully registered user ${username}`);\n      //   setError('');\n      // } else {\n      //   setError(result.error);\n      // }\n      const { data } = await registerUser({\n        variables: { name: username, email: email, password: password },\n      });\n      localStorage.setItem(\"auth_token\", data.register.token);\n      setIsLoggedIn(true);\n      setCurrentTab('profile');\n    } catch (error) {\n      setError(\"Error while registering user\");\n      console.error(error);\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit} className=\"center\">\n      {error && <div style={{ color: \"red\" }}>{error}</div>}\n\n      <div className=\"center\">\n        <h1>\n          <FaUser /> Register\n        </h1>\n        <p>Please create an account</p>\n      </div>\n      <div className=\"form-group\">\n        <label htmlFor=\"username\"></label>\n        <input\n          type=\"text\"\n          id=\"username\"\n          value={username}\n          placeholder=\"Enter your username  \"\n          onChange={handleUsernameChange}\n        />\n      </div>\n      <div className=\"form-group\">\n        <label htmlFor=\"email\"></label>\n        <input\n          type=\"email\"\n          id=\"email\"\n          placeholder=\"Enter your email\"\n          value={email}\n          onChange={handleEmailChange}\n        />\n      </div>\n      <div className=\"form-group\">\n        <label htmlFor=\"password\"></label>\n        <input\n          type=\"password\"\n          id=\"password\"\n          placeholder=\"Enter your password  \"\n          value={password}\n          onChange={handlePasswordChange}\n        />\n      </div>\n      <div className=\"form-group\">\n        <label htmlFor=\"confirmPassword\"></label>\n        <input\n          type=\"password\"\n          id=\"confirmPassword\"\n          placeholder=\"Confirm password\"\n          value={confirmPassword}\n          onChange={handleConfirmPasswordChange}\n        />\n      </div>\n      <button className=\"register-button\" type=\"submit\">\n        Sign Up\n      </button>\n    </form>\n  );\n}\n\nexport default Register;\n","C:\\Users\\smudg\\Desktop\\Bootcamp\\effective-robot\\client\\src\\pages\\Footer\\index.js",[],"C:\\Users\\smudg\\Desktop\\Bootcamp\\effective-robot\\client\\src\\pages\\Header\\index.js",[],"C:\\Users\\smudg\\Desktop\\Bootcamp\\effective-robot\\client\\src\\pages\\Home\\index.js",["71"],"import React, { useState } from \"react\";\nimport \"./Home.css\";\n\nfunction Home() {\n  const [index, setIndex] = useState(0);\n  const images = [\n    {\n      src: '#',\n      text: 'Image 1'\n    },\n    {\n      src: '#',\n      text: 'Image 2'\n    },\n    {\n      src: '#',\n      text: 'Image 3'\n    }\n  ];\n\n  const handlePrev = () => {\n    setIndex(index === 0 ? images.length - 1 : index - 1);\n  };\n  const handleNext = () => {\n    setIndex(index === images.length - 1 ? 0 : index + 1);\n  };\n\n  return (\n    <section>\n      <div className=\"center\" id=\"home\">\n        <div className=\"slideshow-container\">\n          <img src={images[index].src} style={{ filter: \"blur(8px)\" }} />\n          <div className=\"text-box\">\n            <p>{images[index].text}</p>\n          </div>\n        </div>\n        <button id=\"prev\" onClick={handlePrev}>Prev</button>\n        <button id=\"next\" onClick={handleNext}>Next</button>\n      </div>\n      <div className=\"center\"></div>\n      <div>\n        <p></p>\n      </div>\n    </section>\n  );\n}\n\nexport default Home;\n","C:\\Users\\smudg\\Desktop\\Bootcamp\\effective-robot\\client\\src\\pages\\Login\\index.js",["72"],"import React, { useState } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport { FaSignInAlt } from \"react-icons/fa\";\nimport { LOGIN_USER } from \"../../utils/mutations\";\n\nfunction Login({ isLoggedIn, setIsLoggedIn, setCurrentTab }) {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [success, setSuccess] = useState(\"\");\n  const [loginUser, { data }] = useMutation(LOGIN_USER);\n\n  function handleUsernameChange(event) {\n    setUsername(event.target.value);\n  }\n\n  function handlePasswordChange(event) {\n    setPassword(event.target.value);\n  }\n\n  async function handleSubmit(event) {\n    event.preventDefault();\n    // Validate the input values and perform authentication using the mutation\n    try {\n      const { data } = await loginUser({\n        variables: { email: username, password }\n      });\n      localStorage.setItem(\"auth_token\", data.login.token);\n      setError(\"\");\n      setSuccess(\"Login Successful!\");\n      setIsLoggedIn(true);\n      setCurrentTab('profile');\n    } catch (error) {\n      setError(\"Incorrect email or password\");\n      setSuccess(\"\");\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit} className=\"center login-page\">\n      {error && <div style={{ color: \"red\" }}>{error}</div>}\n      {success && <div style={{ color: \"green\" }}>{success}</div>}\n      <div className=\"center\">\n        <h1>\n          <FaSignInAlt /> Login\n        </h1>\n        <p>Login to continue</p>\n      </div>\n      <div className=\"form-group\">\n        <label htmlFor=\"username\"></label>\n        <input\n          type=\"text\"\n          id=\"username\"\n          value={username}\n          placeholder=\"Enter your email address\"\n          onChange={handleUsernameChange}\n        />\n      </div>\n      <div className=\"form-group\">\n        <label htmlFor=\"password\"></label>\n        <input\n          type=\"password\"\n          id=\"password\"\n          value={password}\n          placeholder=\"Enter your password\"\n          onChange={handlePasswordChange}\n        />\n      </div>\n      <button className=\"login-button\" type=\"submit\">\n        Login\n      </button>\n    </form>\n  );\n}\n\nexport default Login;\n","C:\\Users\\smudg\\Desktop\\Bootcamp\\effective-robot\\client\\src\\utils\\mutations.js",[],"C:\\Users\\smudg\\Desktop\\Bootcamp\\effective-robot\\client\\src\\pages\\Navigation\\index.js",[],"C:\\Users\\smudg\\Desktop\\Bootcamp\\effective-robot\\client\\src\\pages\\Profile\\index.js",["73","74","75","76","77","78","79"],"import React, { useState, useEffect } from \"react\";\nimport { QUERY_ME, QUERY_GETADMIN } from \"../../utils/queries\"\nimport { CREATE_PROFILE, SET_ADMIN, SET_PIN } from \"../../utils/mutations\";\nimport { useMutation, useQuery } from '@apollo/client';\nimport ProfileList from \"../components/ProfileList\";\n\nconst LoginPage = ({ isLoggedIn, selectedProfile, setSelectedProfile, isAdmin, setIsAdmin }) => {\n\n  // const [selectedProfile, setSelectedProfile] = useState(null);\n  // const [isAdmin, setIsAdmin] = useState(false);\n\n  const [formName, setFormName] = useState(\"\");\n  const [formPIN, setFormPIN] = useState(\"\");\n\n  const { loading, data: userData, refetch: refetchUser } = useQuery(QUERY_ME);\n  const id = userData?.me._id;\n  const { data: adminName, refetch: refetchAdmin } = useQuery(QUERY_GETADMIN, { variables: { id } });\n  const GetProfiles = () => {\n    refetchUser();\n    refetchAdmin();\n\n  }\n  const [CreateProfile, { error }] = useMutation(CREATE_PROFILE);\n  const [SetAdmin, { error: adminError }] = useMutation(SET_ADMIN);\n  const [SetPin, { error: pinError }] = useMutation(SET_PIN);\n\n  const SelectProfile = async (name) => {\n    if (adminName.getAdmin.profiles[0].name == name) {\n      let verify = await CheckForAdmin();\n      if (verify) {\n        setSelectedProfile(name);\n        setIsAdmin(true);\n      } \n    } else {\n      setSelectedProfile(name);\n      setIsAdmin(false);\n    }\n  }\n\n\n  const handleCreateProfile = async (profileName, selected = false) => {\n    const newProfiles = await CreateProfile({\n      variables: {\n        id: userData.me._id,\n        name: profileName\n      },\n    });\n    GetProfiles();\n    if (selected) {\n      return;\n    }\n    setSelectedProfile(newProfiles.data.createProfile.profiles[\n      newProfiles.data.createProfile.profiles.length - 1].name);\n  };\n\n  const CheckForAdmin = async () => {\n    let _pin = prompt(\"Please enter your PIN to verify admin status.\", \"4 digit PIN\");\n    if (_pin == userData.me.pin) {\n      return true;\n    } else {\n      alert(\"Wrong PIN\");\n      return false;\n    }\n  }\n\n\n  const handleMakeAdmin = async (profileName) => {\n    await SetAdmin({\n      variables: {\n        id: userData.me._id,\n        name: profileName\n      }\n    });\n\n    if (selectedProfile != profileName)\n    {\n      setIsAdmin(false);\n      refetchAdmin();\n    }\n  };\n\n  if (!isLoggedIn) {\n    return (\n      <div>\n        <h1>Please login</h1>\n      </div>\n    );\n  }\n\n  const handleNameChange = (e) => {\n    const { value } = e.target;\n    setFormName(value);\n  };\n  const handlePINChange = (e) => {\n    const { value } = e.target;\n    setFormPIN(value);\n  };\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    await CreateProfile({\n      variables: {\n        id: userData.me._id,\n        name: formName\n      },\n    });\n    \n    await SetAdmin({\n      variables: {\n        id: userData.me._id,\n        name: formName\n      }\n    });\n\n    await SetPin({\n      variables: {\n        id: userData.me._id,\n        pin: formPIN\n      }\n    });\n\n    setSelectedProfile(formName);\n    setIsAdmin(true);\n    GetProfiles();\n  };\n\n\n  if (loading)\n  {\n    return (\n      <div>loading</div>\n    );\n  }\n  if (!userData.me)\n  {\n    return (\n      <div>no user data</div>\n    );\n  }\n\n  if (!selectedProfile) {\n    if (userData.me && userData.me.profiles.length > 0) {\n      return (\n        <div>\n          <h1>Select or create a profile</h1>\n            { loading ? (\n              <div>Loading...</div>\n            ) : (\n              userData.me.profiles ? (\n                <ProfileList \n                userData={userData.me} \n                setSelectedProfile={SelectProfile} \n                isAdmin={isAdmin}\n                handleMakeAdmin={handleMakeAdmin}\n                />\n              ) : (\n                <div></div>\n              )\n            )}\n          \n          <input\n            type=\"text\"\n            placeholder=\"Enter profile name\"\n            onKeyPress={event => {\n              if (event.key === 'Enter') {\n                handleCreateProfile(event.target.value);\n                event.target.value=\"\";\n              }\n            }}\n          />\n        </div>\n      );\n\n    } else {\n      return (\n        <div>\n          <h1>To begin, create a new profile</h1>\n          <p>This profile will have administrative permissions. This can be changed later</p>\n          <form>\n            <h2>Profile Name</h2>\n            <input \n              type=\"text\"\n              placeholder=\"Enter profile name\"\n              value={formName}\n              onChange={handleNameChange}\n            />\n            <h2>Set PIN</h2>\n            <p>This pin number will be used to login to the Admin account as well as create chore lists within the game.</p>\n            <input \n              type=\"text\"\n              placeholder=\"Enter a 4 digit PIN.\"\n              value={formPIN}\n              onChange={handlePINChange}\n            />\n            <button type=\"submit\" onClick={handleFormSubmit}>Submit</button>\n          </form>\n        </div>\n      )\n    }\n    \n  } else {\n\n    return (\n      // users name, completed previously, and coins, and way to change profile\n      <div>\n        {/* <h1>Welcome to the Chores Game, {selectedProfile}</h1>\n        { isAdmin ? (\n          <div>\n            <h2>Admin controls</h2>\n            <ul>\n              {userData.profiles.map(profile => (\n                <li key={profile.name}>\n                  {profile.name}\n                  {!profile.isAdmin ? (\n                    <button onClick={() => handleMakeAdmin(profile.name)}>\n                      Make admin\n                    </button>\n                  ) : (\n                    <span> - Admin</span>\n                  )}\n                </li>\n              ))}\n            </ul>\n          </div>\n        ) : (\n          <div>\n            <h2>Enjoy the game!</h2>\n          </div>\n        )} */}\n        <h1>Welcome to the Chores Game, {selectedProfile}</h1>\n        <ProfileList \n                userData={userData.me} \n                setSelectedProfile={SelectProfile} \n                isAdmin={isAdmin}\n                handleMakeAdmin={handleMakeAdmin}\n        />\n        <input\n            type=\"text\"\n            placeholder=\"Enter profile name\"\n            onKeyPress={event => {\n              if (event.key === 'Enter') {\n                handleCreateProfile(event.target.value, true);\n                event.target.value=\"\";\n              }\n            }}\n          />\n      </div>\n    );\n\n  }\n\n//   const selectedProfileObject = profiles.find(\n//     profile => profile.name === selectedProfile\n//   );\n\n//   if (!selectedProfileObject.isLoggedIn) {\n//     return (\n//       <div>\n//         <h1>Please login to profile: {selectedProfile}</h1>\n//         <button\n//           onClick={() => {\n//             const updatedProfiles = profiles.map(profile => {\n//               if (profile.name === selectedProfile) {\n//                 profile.isLoggedIn = true;\n//               }\n//               return profile;\n//             });\n//             setProfiles(updatedProfiles);\n//           }}\n//         >\n//           Login\n//         </button>\n//       </div>\n//  );\n//   }\n\n};\n\nexport default LoginPage;","C:\\Users\\smudg\\Desktop\\Bootcamp\\effective-robot\\client\\src\\pages\\Game\\index.js",["80","81","82","83","84","85"],"C:\\Users\\smudg\\Desktop\\Bootcamp\\effective-robot\\client\\src\\utils\\queries.js",[],"C:\\Users\\smudg\\Desktop\\Bootcamp\\effective-robot\\client\\src\\pages\\components\\ProfileList\\index.js",["86","87"],"import React, { useState } from \"react\";\n\nconst ProfileList = ({ userData, setSelectedProfile, isAdmin, handleMakeAdmin }) => {\n\n\n    return (\n      <div>\n        { isAdmin ? (\n          <h2>Admin Controls</h2>\n        ) : (\n          <div></div>\n        ) }\n        <ul>\n            {userData.profiles.map(profile => (\n                <li key={profile.name}>\n                  <span\n                    key={profile.name}\n                    onClick={() => setSelectedProfile(profile.name)}\n                  >{profile.name} </span>\n                  \n                  { isAdmin ? (\n                    <a onClick={() => handleMakeAdmin(profile.name)} >\n                      Make this Profile Admin\n                    </a>\n                  ) : (\n                    <div></div>\n                  )}\n                </li>\n              \n              ))}\n        </ul>\n      </div>\n        \n\n    )\n\n}\n\nexport default ProfileList;","C:\\Users\\smudg\\Desktop\\Bootcamp\\effective-robot\\client\\src\\utils\\choreMutations.js",[],{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","severity":1,"message":"93","line":13,"column":26,"nodeType":"94","messageId":"95","endLine":13,"endColumn":32},{"ruleId":"96","severity":1,"message":"97","line":32,"column":11,"nodeType":"98","endLine":32,"endColumn":74},{"ruleId":"92","severity":1,"message":"99","line":11,"column":23,"nodeType":"94","messageId":"95","endLine":11,"endColumn":27},{"ruleId":"92","severity":1,"message":"100","line":1,"column":27,"nodeType":"94","messageId":"95","endLine":1,"endColumn":36},{"ruleId":"92","severity":1,"message":"101","line":23,"column":27,"nodeType":"94","messageId":"95","endLine":23,"endColumn":32},{"ruleId":"92","severity":1,"message":"102","line":24,"column":29,"nodeType":"94","messageId":"95","endLine":24,"endColumn":39},{"ruleId":"92","severity":1,"message":"103","line":25,"column":27,"nodeType":"94","messageId":"95","endLine":25,"endColumn":35},{"ruleId":"104","severity":1,"message":"105","line":28,"column":45,"nodeType":"106","messageId":"107","endLine":28,"endColumn":47},{"ruleId":"104","severity":1,"message":"105","line":58,"column":14,"nodeType":"106","messageId":"107","endLine":58,"endColumn":16},{"ruleId":"104","severity":1,"message":"108","line":75,"column":25,"nodeType":"106","messageId":"107","endLine":75,"endColumn":27},{"ruleId":"92","severity":1,"message":"100","line":1,"column":27,"nodeType":"94","messageId":"95","endLine":1,"endColumn":36},{"ruleId":"92","severity":1,"message":"109","line":5,"column":8,"nodeType":"94","messageId":"95","endLine":5,"endColumn":13},{"ruleId":"92","severity":1,"message":"99","line":10,"column":10,"nodeType":"94","messageId":"95","endLine":10,"endColumn":14},{"ruleId":"92","severity":1,"message":"110","line":10,"column":16,"nodeType":"94","messageId":"95","endLine":10,"endColumn":23},{"ruleId":"104","severity":1,"message":"105","line":37,"column":40,"nodeType":"106","messageId":"107","endLine":37,"endColumn":42},{"ruleId":"111","severity":1,"message":"112","line":152,"column":15,"nodeType":"98","endLine":152,"endColumn":18},{"ruleId":"92","severity":1,"message":"113","line":1,"column":17,"nodeType":"94","messageId":"95","endLine":1,"endColumn":25},{"ruleId":"111","severity":1,"message":"112","line":22,"column":21,"nodeType":"98","endLine":22,"endColumn":71},"no-native-reassign",["114"],"no-negated-in-lhs",["115"],"no-unused-vars","'_error' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'data' is assigned a value but never used.","'useEffect' is defined but never used.","'error' is assigned a value but never used.","'adminError' is assigned a value but never used.","'pinError' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","'axios' is defined but never used.","'setData' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","'useState' is defined but never used.","no-global-assign","no-unsafe-negation"]